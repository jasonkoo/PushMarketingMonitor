<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!-- 读取资源文件 -->
	
	<!-- 
	<bean id="env"
		class="com.lenovo.lps.push.marketing.monitor.param.Env">
		<property name="production" value="0" /> 
	</bean>
	 -->
	 
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		 <!-- <property name="location" value="classpath:prod-config.properties" />  -->
		 <!--  <property name="location" value="#{env.production &gt; 0 ? 'classpath:prod-config.properties' : 'classpath:test-config.properties'}" /> -->
		  <property name="location" value="#{ systemProperties['os.name'].toUpperCase().indexOf('WINDOWS') == -1  ? 'classpath:prod-config.properties' : 'classpath:test-config.properties'}" /> 
		<!--   <property name="location" value="#{T(com.lenovo.lps.push.marketing.monitor.param.Env).isWindows() ? 'classpath:test-config.properties' : 'classpath:prod-config.properties'}" /> --> 
	</bean>
	
	<!--  
		<bean id="hitconfigservice" class="com.lenovo.lps.push.marketing.manager.services.HitConfigService">
			<property name="zkAddress">
				<value>${zkAddress}</value>
			</property>
			<property name="zkPath">
				<value>${zkPath}</value>
			</property>		
		</bean>
	-->
	 
	<bean id="dataSourceMysql"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName">
			<value>${driverClassName}</value>
		</property>
		<property name="password">
			<!-- <value>123456</value> -->
			<value>${password}</value>
		</property>
		<property name="username">
			<value>${username}</value>
		</property>
		<property name="url">
			<value>${url}</value>
			<!-- <value>jdbc:mysql://127.0.0.1:3306/db_avatarui?useUnicode=true&amp;characterEncoding=utf-8</value> -->
		</property>
	</bean>
	
	<bean id="sqlSessionFactoryMysql" class="org.mybatis.spring.SqlSessionFactoryBean" name="sqlSessionFactoryMysql">
		<property name="dataSource" ref="dataSourceMysql" />
		<property name="configLocation" value="classpath:mybatis.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:config/mybatis/sql/*-mapper.xml</value>
				<value>classpath:config/mybatis/resultMap/*-resultMap.xml</value>
			</list>
		</property>
	</bean>
	
	 <bean id="sqlSessionTemplateMysql"     class="org.mybatis.spring.SqlSessionTemplate">   
      <constructor-arg index="0" ref="sqlSessionFactoryMysql" />   
    </bean>  
	
	<!-- 自动扫描cn.info.platform.mapper包下的Mapper接口,并实现其功能  -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplateMysql"/>
		<property name="basePackage" value="cn.info.platform.mapper,com.lenovo.push.marketing.lestat.db.mapper" />
		<property name="markerInterface" value="cn.info.platform.mapper.BaseMapper" />
	</bean>
	
	<!-- 事务配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceMysql" />
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="modify*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 自动代理配置 -->
	<aop:config>
		 <aop:pointcut expression="execution (* cn.info.platform.service.impl.*.*(..))" id="service"/>
		 <aop:advisor advice-ref="txAdvice" pointcut-ref="service"/>
	</aop:config>
	
	<!-- 标注类型 的事务配置 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	
	

	
	
	<bean id="dataSourceMdrill"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName">
			<value>${mdrill.driverClassName}</value>
		</property>
		<property name="url">
			<value>${mdrill.url}</value>
		</property>
	</bean>
	<bean id="sqlSessionFactoryMdrill" class="org.mybatis.spring.SqlSessionFactoryBean" name="sqlSessionFactoryMdrill">
		<property name="dataSource" ref="dataSourceMdrill" />
		<property name="configLocation" value="classpath:mybatis1.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:config/mybatis/sql1/*-mapper.xml</value>
				<value>classpath:config/mybatis/resultMap1/*-resultMap.xml</value>
			</list>
		</property>
	</bean>
	
	<bean id="sqlSessionTemplateMdrill"     class="org.mybatis.spring.SqlSessionTemplate">   
      <constructor-arg index="0" ref="sqlSessionFactoryMdrill" />   
    </bean>  
		
	<!-- 自动扫描cn.info.platform.mapper包下的Mapper接口,并实现其功能  -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplateMdrill"/>
		<property name="basePackage" value="com.lenovo.lps.push.marketing.monitor.mapper" />
		<property name="markerInterface" value="com.lenovo.lps.push.marketing.monitor.mapper.BaseMapper" />
	</bean>
</beans>